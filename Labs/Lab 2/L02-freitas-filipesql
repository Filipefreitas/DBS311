-- ***********************
-- Name: Filipe da Cunha de Freitas
-- ID: 155737190
-- Date: 2021-01-23
-- Purpose: Lab 2 DBS311
-- ***********************

-- Q1: For each job title display the number of employees. Sort the result according to the number
-- Q1 SOLUTION --
SELECT 
    job_title
    , count(*) AS "EMPLOYEES"
FROM employees
GROUP BY job_title
ORDER BY "Employees" ASC;

-- Q2: Display the highest, lowest, and average customer credit limits. Name these results high, low, and average. 
--Add a column that shows the difference between the highest and the lowest credit limits named “High and Low Difference”. Round the average to 2 decimal places.
-- Q2 SOLUTION --
SELECT
    MAX(credit_limit) AS "HIGH"
    , MIN(credit_limit) AS "LOW"
    , ROUND(AVG(credit_limit), 2) AS "AVERAGE"
    , MAX(credit_limit) - MIN(credit_limit) AS "High and Low Difference"    
FROM customers;

-- Q3: Display the order id, the total number of products, and the total order amount for orders with the total amount over $1,000,000. 
--Sort the result based on total amount from the high to low values.
-- Q3 SOLUTION --
SELECT
    o.order_id
    , SUM(i.quantity) AS "TOTAL_ITEMS"
    , SUM(i.quantity * i.unit_price) AS "TOTAL_AMOUNT"
FROM orders o LEFT JOIN order_items i
ON o.order_id = i.order_id
GROUP BY o.order_id
ORDER BY "TOTAL_AMOUNT" DESC;

-- Q4: Display the warehouse id, warehouse name, and the total number of products for each warehouse. 
--Sort the result according to the warehouse ID.
-- Q4 SOLUTION --
SELECT
    w.warehouse_id
    , w.warehouse_name
    , SUM(i.quantity) AS "TOTAL_PRODUCTS"
FROM warehouses w LEFT JOIN inventories i
ON w.warehouse_id = i.warehouse_id
GROUP BY w.warehouse_id, w.warehouse_name
ORDER BY w.warehouse_id;

-- Q5: For each customer display customer number, customer full name, and the total number of orders issued by the customer.
--? If the customer does not have any orders, the result shows 0.
--? Display only customers whose customer name starts with ‘O’ and contains ‘e’.
--? Include also customers whose customer name ends with ‘t’.
--? Show the customers with highest number of orders first.
-- Q5 SOLUTION --
SELECT
    c.customer_id
    , c.name AS "customer name"
    , COUNT(o.order_id) AS "total number of orders"
FROM customers c LEFT JOIN orders o
ON c.customer_id = o.customer_id
WHERE TRIM(UPPER(c.name)) like 'O%' 
    AND c.name like '%e%'
    OR TRIM(c.name) like '%t'
GROUP BY c.customer_id, c.name
ORDER BY "total number of orders" DESC;

-- Q6. Write a SQL query to show the total and the average sale amount for each category. 
--Round the average to 2 decimal places.
-- Q6 SOLUTION --
SELECT
    p.category_id
    , SUM(o.quantity * o.unit_price) AS "TOTAL_AMOUNT"
    , ROUND(AVG(o.quantity * o.unit_price), 2) AS "AVERAGE_AMOUNT"
FROM order_items o
    LEFT JOIN products p 
    ON o.product_id = p.product_id
GROUP BY p.category_id;