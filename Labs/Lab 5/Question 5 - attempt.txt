SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE product_price_report 
AS  
    listPrice products.list_price%type;
    avgPrice products.list_price%type;
    maxPrice products.list_price%type;
    minPrice products.list_price%type;
    cheap_count NUMBER;
    fair_count NUMBER;
    exp_count NUMBER;
  
BEGIN
    SELECT 
        AVG(list_price)
        , MAX(list_price)
        , MIN(list_price)
    INTO 
        avgPrice
        , maxPrice
        , minPrice
    FROM products;

    UPDATE products 
    SET products.list_price = products.list_price   
    WHERE products.list_price < (avgPrice - minPrice)/2;
    cheap_count := sql%rowcount;
    DBMS_OUTPUT.PUT_LINE ('Cheap: ' || cheap_count);
    
    UPDATE products 
    SET products.list_price = products.list_price   
    WHERE products.list_price <= (maxPrice - avgPrice)/2 AND products.list_price >= (avgPrice - minPrice)/2;
    fair_count:= sql%rowcount;
    DBMS_OUTPUT.PUT_LINE ('Fair: ' || fair_count);

    UPDATE products 
    SET products.list_price = products.list_price   
    WHERE products.list_price >= (avgPrice - minPrice)/2;
    exp_count := sql%rowcount;
    DBMS_OUTPUT.PUT_LINE ('Expensive: ' || exp_count); 

EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Error: trying to SELECT too many rows');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: no data found');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('An Error has occured');
END product_price_report;  
/

BEGIN
    product_price_report;
END;
/